# CI/CD pipeline for Document Service microservice
# Implements automated build, test, and deployment with security scanning
# REQ: Continuous Integration - Automated build and test pipeline with quality gates

name: Document Service CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION: "3.11"
  AWS_REGION: us-east-1
  ECR_REPOSITORY: document-service
  IMAGE_NAME: document-service
  DOCKER_BUILDKIT: "1"

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    # REQ: Code Quality - Testing and code analysis implementation
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.5.1
          poetry config virtualenvs.create false
          
      - name: Install Dependencies
        working-directory: src/backend/document-service
        run: poetry install
        
      - name: Run Linting
        working-directory: src/backend/document-service
        run: |
          poetry run pylint src/ tests/ --rcfile=pyproject.toml
          
      - name: Run Tests with Coverage
        working-directory: src/backend/document-service
        run: |
          poetry run pytest --cov=src --cov-report=xml --cov-report=term-missing
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: src/backend/document-service
          file: src/backend/document-service/Dockerfile
          load: true
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy:
    name: Deploy to AWS
    needs: build
    runs-on: ubuntu-latest
    # REQ: Container Deployment - Automated deployment to AWS infrastructure
    environment:
      name: ${{ github.event_name == 'push' && 'production' || 'development' }}
      url: ${{ github.event_name == 'push' && 'api.dollarfunding.com' || 'dev.api.dollarfunding.com' }}
      
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          
      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: src/backend/document-service
          file: src/backend/document-service/Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHONUNBUFFERED=1
            PORT=8000
            
      - name: Update EKS Deployment
        run: |
          aws eks update-kubeconfig --name document-service-cluster --region ${{ env.AWS_REGION }}
          kubectl set image deployment/document-service \
            document-service=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            -n document-service
            
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/document-service -n document-service --timeout=300s
          
      - name: Check Service Health
        run: |
          ENDPOINT=${{ github.event_name == 'push' && 'api.dollarfunding.com' || 'dev.api.dollarfunding.com' }}
          for i in {1..30}; do
            if curl -sf https://$ENDPOINT/health/live; then
              exit 0
            fi
            sleep 10
          done
          exit 1