# Human Tasks:
# 1. Configure AWS IAM role with necessary permissions for ECR and EKS access
# 2. Set up repository secrets for AWS_ROLE_ARN and AWS_REGION
# 3. Configure branch protection rules for main branch
# 4. Set up environment protection rules for staging and production

# Implements: Web Frontend CI/CD (4. SYSTEM ARCHITECTURE/4.2 Component Details/4.2.1 Core Components)
# Implements: Frontend Deployment (8. INFRASTRUCTURE/8.5 CI/CD PIPELINE/8.5.2 Pipeline Stages)
name: Web Frontend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/web/**'
      - '.github/workflows/web.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mca-web-frontend
  NODE_VERSION: '18.x'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/web

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Install Dependencies
        run: npm ci
        
      - name: Run Linting
        run: npm run lint
        
      - name: Run Unit Tests
        run: npm run test
        
      - name: Run E2E Tests
        run: npm run test:e2e
        
      - name: Build Application
        run: npm run build
        
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: src/web/dist
          retention-days: 1

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: Development
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:dev
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: Staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:staging
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-prod:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: Production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max