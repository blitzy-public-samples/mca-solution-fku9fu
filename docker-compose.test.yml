# REQ-8.1 Test Environment: Test environment configuration with reduced redundancy and sandbox integrations
version: '3.8'

services:
  # REQ-4.2.1 Core Components: Kong API Gateway implementation
  api-gateway:
    image: kong:3.x
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API port
    environment:
      - KONG_DATABASE=off
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
    volumes:
      - ./src/backend/api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test_network

  # REQ-4.2.1 Core Components: Spring Boot core service implementation
  core-service:
    build:
      context: ./src/backend/core-service
      dockerfile: Dockerfile
    ports:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=test
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:testdb
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test_network

  # REQ-4.2.1 Core Components: Document processing service implementation
  document-service:
    build:
      context: ./src/backend/document-service
      dockerfile: Dockerfile
    ports:
      - "8000"
    environment:
      - ENVIRONMENT=test
      - MINIO_ENDPOINT=minio:9000
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - test_network

  # REQ-4.2.1 Core Components: Email notification service implementation
  email-service:
    build:
      context: ./src/backend/email-service
      dockerfile: Dockerfile
    ports:
      - "3000"
    environment:
      - NODE_ENV=test
      - RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test_network

  # REQ-4.2.1 Core Components: Push notification service implementation
  notification-service:
    build:
      context: ./src/backend/notification-service
      dockerfile: Dockerfile
    ports:
      - "3004"
    environment:
      - NODE_ENV=test
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test_network

  # REQ-8.1 Test Environment: Test database with tmpfs for performance
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=mca_test_db
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "test_user", "-d", "mca_test_db"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test_network

  # REQ-8.1 Test Environment: In-memory cache for testing
  redis:
    image: redis:7.0-alpine
    command: redis-server --save "" --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test_network

  # REQ-8.1 Test Environment: Message broker for testing
  rabbitmq:
    image: rabbitmq:3.12-alpine
    environment:
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=256MiB
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test_network

  # REQ-8.1 Test Environment: S3-compatible storage for testing
  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ':9001'
    tmpfs:
      - /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - test_network

# REQ-8.1 Test Environment: Isolated test network
networks:
  test_network:
    driver: bridge