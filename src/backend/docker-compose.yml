# REQ-4.1 High-Level Architecture: Defines containerized deployment of backend microservices
version: '3.8'

services:
  # REQ-4.2.1 Core Components: Kong API Gateway implementation
  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API port
      - "8443:8443"  # SSL proxy port
    environment:
      - KONG_DATABASE=off
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_SSL=on
      - KONG_ADMIN_SSL=on
    depends_on:
      - core-service
      - document-service
      - email-service
      - notification-service
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # REQ-4.2.1 Core Components: Spring Boot Core Service implementation
  core-service:
    build:
      context: ./core-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=mca_db
      - POSTGRES_USER=mca_user
      - REDIS_HOST=redis
      - JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # REQ-4.2.1 Core Components: Python Document Processing Service
  document-service:
    build:
      context: ./document-service
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=mca_db
      - POSTGRES_USER=mca_user
    depends_on:
      - redis
      - postgres
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # REQ-4.2.1 Core Components: Node.js Email Processing Service
  email-service:
    build:
      context: ./email-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      - rabbitmq
      - redis
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # REQ-4.2.1 Core Components: Node.js Notification Service
  notification-service:
    build:
      context: ./notification-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - RABBITMQ_HOST=rabbitmq
      - REDIS_HOST=redis
    depends_on:
      - rabbitmq
      - redis
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # REQ-4.2.2 Data Storage Components: PostgreSQL Database
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_DB=mca_db
      - POSTGRES_USER=mca_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "mca_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # REQ-4.2.2 Data Storage Components: Redis Cache Layer
  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # REQ-4.2.2 Data Storage Components: RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# REQ-4.2.2 Data Storage Components: Persistent Storage Configuration
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

# REQ-4.3.2 Communication Patterns: Internal Network Configuration
networks:
  backend:
    driver: bridge

# REQ-4.4.2 Security Architecture: Secure Credential Management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt