# Human Tasks:
# 1. Verify ECR registry URL and access permissions are configured correctly
# 2. Ensure RabbitMQ credentials are properly encoded and stored in secrets
# 3. Review and adjust resource limits based on actual usage metrics
# 4. Configure network policies to restrict pod communication
# 5. Verify Prometheus scraping endpoints are properly secured

# Kubernetes version: 1.27.x

# Addresses requirement: Webhook Management
# Location: Technical Specification/System Design/API Design/Integration Requirements
# Description: Deployment configuration for webhook notification service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: mca-system
  labels:
    app: notification-service
    environment: ${ENVIRONMENT}
spec:
  replicas: 3  # High availability with multiple replicas
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
    spec:
      # Addresses requirement: High Availability
      # Location: Technical Specification/Infrastructure/Deployment Environment
      # Description: Pod anti-affinity for multi-AZ deployment
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - notification-service
              topologyKey: kubernetes.io/hostname
      containers:
      - name: notification-service
        image: ${ECR_REGISTRY}/notification-service:${IMAGE_TAG}
        ports:
        - containerPort: 3000
          name: http
        # Resource limits for scalability and stability
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        # Addresses requirement: Security Controls
        # Location: Technical Specification/Security Considerations/Security Controls
        # Description: Secure configuration and credential management
        envFrom:
        - configMapRef:
            name: notification-service-config
        - secretRef:
            name: rabbitmq-credentials
        # Health probes for reliability and availability
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 12

# Addresses requirement: Scalability
# Location: Technical Specification/System Architecture/Component Details
# Description: Service configuration for load balancing and monitoring
---
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: mca-system
  labels:
    app: notification-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: notification-service